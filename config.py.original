#              _   _   _                    ___  _   _ _
# _ __ ___    / \ | |_| |__   __ _ _   _   / _ \| |_(_) | ___
#| '_ ` _ \  / _ \| __| '_ \ / _` | | | | | | | | __| | |/ _ \
#| | | | | |/ ___ \ |_| | | | (_| | |_| | | |_| | |_| | |  __/
#|_| |_| |_/_/   \_\__|_| |_|\__,_|\__, |  \__\_\\__|_|_|\___|
#                                  |___/
# ____        _
#|  _ \  ___ | |_ ___
#| | | |/ _ \| __/ __|
#| |_| | (_) | |_\__ \
#|____/ \___/ \__|___/
# SOFTWARE.
from libqtile import bar, layout, widget
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy

mod = "mod4"
#Terminal, uses "guess_terminal" by default
terminal = "alacritty"

import os
import subprocess

from libqtile import hook

@hook.subscribe.startup_once
def autostart():
    home = os.path.expanduser('~/.config/qtile/autostart.sh')
    subprocess.Popen([home])

    import psutil

@hook.subscribe.client_new
def _swallow(window):
    pid = window.get_net_wm_pid()
    ppid = psutil.Process(pid).ppid()
    cpids = {c.window.get_net_wm_pid(): wid for wid, c in window.qtile.windows_map.items()}
    for i in range(5):
        if not ppid:
            return
        if ppid in cpids:
            parent = window.qtile.windows_map.get(cpids[ppid])
            parent.minimized = True
            window.parent = parent
            return
        ppid = psutil.Process(ppid).ppid()

@hook.subscribe.client_killed
def _unswallow(window):
    if hasattr(window, 'parent'):
        window.parent.minimized = False

keys = [
    # A list of available commands that can be bound to keys can be found
    # at https://docs.qtile.org/en/latest/manual/config/lazy.html
    # Switch between windows
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),
    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
    # Grow windows. If current window is on the edge of screen and direction
    # will be to screen edge - window would shrink.
    Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod, "control"], "l", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key(
        [mod, "shift"],
        "Return",
        lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack",
    ),
    Key([mod], "t", lazy.spawn("alacritty"), desc="Launch terminal"),
    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod, "shift"], "q", lazy.window.kill(), desc="Kill focused window"),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    Key([mod, "shift"], "v", lazy.spawn("brave-browser"), desc="Open Brave"),
    Key([mod], "d", lazy.spawn("rofi -show drun"), desc="Open application launcher"),
    Key([mod, "shift"], "l", lazy.spawn("/home/arttu/AppImages/Librewolf.AppImage"), desc="Open Librewolf"),
    Key([mod, "shift"], "d", lazy.spawn("discord"), desc="Open Discord"),
    Key([mod, "shift"], "p", lazy.spawn("lollypop"), desc="Media player"),
    Key([mod, "shift"], "c", lazy.spawn("chromium"), desc="Secondary browser"),
    Key([mod, "shift"], "y", lazy.spawn("brightnessctl s +100"), desc="Set brightness up"),
    Key([mod, "shift"], "u", lazy.spawn("brightnessctl s 100-"), desc="Set brightness down"),
    Key([], "XF86AudioMute", lazy.spawn("amixer -q set Master toggle"), desc="Mute audio"),
    Key([], "XF86AudioLowerVolume", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ -10%"), desc="Sound down"),
    Key([], "XF86AudioRaiseVolume", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ +10%"), desc="Sound down"),
    Key([mod, "shift"], "f", lazy.spawn("firefox"), desc="Browser"),  
    Key([mod, "shift"], "n", lazy.spawn("nemo"), desc="Open graphical file browser"),  
    Key([mod, "shift"], "t", lazy.spawn("thunderbird"), desc="Open mail"),  
    Key([mod, "shift"], "g", lazy.spawn("grim"), desc="Take a screenshot"),  
    Key([mod, "shift"], "space", lazy.window.toggle_floating()),
    Key([mod], "p", lazy.spawn("pavucontrol"), desc="Control volume"),
    Key([mod], "r", lazy.spawn("alacritty -e ranger"), desc="Open terminal file browser"),
    Key([mod, "shift"], "r", lazy.spawn("liferea"), desc="Open RSS reader"),
    Key([mod], "m", lazy.spawn("bash Scripts/Monitorsetup"), desc="DMenu script to setup monitors"),
]

groups = [Group(i) for i in "123456789"]

for i in groups:
    keys.extend(
        [
            # mod1 + letter of group = switch to group
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Switch to group {}".format(i.name),
            ),
            # mod1 + shift + letter of group = switch to & move focused window to group
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=False),
                desc="Switch to & move focused window to group {}".format(i.name),
            ),
            # Or, use below if you prefer not to switch to that group.
            # # mod1 + shift + letter of group = move focused window to group
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
            #     desc="move focused window to group {}".format(i.name)),
        ]
    )

layouts = [
    layout.Columns(border_width=4, margin = 2, border_focus="#"),
    layout.Max(
    border_width=2
        ),
    # Try more layouts by unleashing below layouts.
    # layout.Stack(num_stacks=2),
    # layout.Bsp(),
    # layout.Matrix(),
    # layout.MonadTall(),
    # layout.MonadWide(),
    # layout.RatioTile(),
    # layout.Tile(),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]

widget_defaults = dict(
    font="sans",
    fontsize=12,
    padding=3,
)
extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        top=bar.Bar(
            [
                widget.GroupBox(borderwidth=3, font='Hack Nerd Font Bold'),
                widget.Prompt(),
                widget.WindowName(
                    font='Hack Nerd Font Bold',
                    colour='689d6a'
                    ),
                widget.Chord(
                    chords_colors={
                        "launch": ("#ff0000", "#ffffff"),
                    },
                    name_transform=lambda name: name.upper(),
                ),
#                widget.TextBox("default config", name="default"),
                # NB Systray is incompatible with Wayland, consider using StatusNotifier instead
                # widget.StatusNotifier(),
                widget.OpenWeather(
                    location='Helsinki',
                    padding=10,
                    font='Hack Nerd Font Bold',
                    format='[ {location_city}: {main_temp} °{units_temperature} {humidity}% {weather_details} ]'),
         #       widget.Memory(
         #           update_interval=30, format='{MemUsed: .0f}{mm}'),
                widget.ThermalSensor(
                    font='Hack Nerd Font Bold', update_interval=60), 
                widget.Battery(
                    format='[ {percent:1.0%}, {hour:d}:{min:02d} {char} ]',
                    padding=5, discharge_char="", charge_char="", font='Hack Nerd Font Bold'
                    ),
                widget.Battery(
                    format='[ {percent:1.0%}, {hour:d}:{min:02d} {char} ]',
                    padding=5, discharge_char="", charge_char="", battery="BAT0", font='Hack Nerd Font Bold'
                    ),

                widget.Volume(
                    fmt=' {}', padding=10, font='Hack Nerd Font Bold'
                    ),
                widget.Clock(
                    format="[ %Y-%m-%d %a %I:%M %p ]", font='Hack Nerd Font Bold'),
                widget.Systray(),
            ],
            24,
            # border_width=[2, 0, 2, 0],  # Draw top and bottom borders
            # border_color=["ff00ff", "000000", "ff00ff", "000000"]  # Borders are magenta
        ),
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]


dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "Qtile"
